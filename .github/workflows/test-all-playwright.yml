name: 🎭 Test All Playwright Libraries

on:
  workflow_dispatch:
    inputs:
      device:
        description: 'Mobile device to emulate'
        required: false
        default: 'iphone_x'
        type: choice
        options:
          - iphone_x
          - iphone_12
          - samsung_galaxy
      mode:
        description: 'Test execution mode'
        required: false
        default: 'sequential'
        type: choice
        options:
          - sequential
          - parallel

env:
  PROXY_HOST: ${{ secrets.PROXY_HOST }}
  PROXY_PORT: ${{ secrets.PROXY_PORT }}
  PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
  PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
  CAMOUFOX_SKIP_AUTO_UPDATE: true
  NO_GITHUB_API: true

jobs:
  test-all-playwright:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    
    steps:
    - name: 📄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
        
    - name: 🔧 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          xvfb \
          libgtk-3-0 \
          libnotify-dev \
          libnss3 \
          libxss1 \
          libasound2t64 \
          libxtst6 \
          xauth \
          libgbm1 \
          libxkbcommon0 \
          libxrandr2 \
          libxcomposite1 \
          libxdamage1 \
          libatk-bridge2.0-0 \
          libpango-1.0-0 \
          libcairo2 \
          libatspi2.0-0 \
          chromium-browser \
          firefox \
          wget
        
        # Verify browsers
        echo "Chrome binary check:"
        which chromium-browser || which chromium || which google-chrome || echo "Chrome not in PATH"
        echo "Firefox binary check:"
        which firefox || echo "Firefox not in PATH"
        
    - name: 📦 Install All Dependencies & Browsers
      run: |
        pip install --upgrade pip
        pip install -r requirements.txt
        
        # Install Playwright browsers
        echo "=== Installing Browsers ==="
        playwright install chromium firefox
        playwright install-deps chromium firefox
        
        # Install Patchright browser
        patchright install chromium || echo "⚠️ Patchright install warning (continuing)"
        
        # Install Rebrowser Playwright browser - Multiple methods
        echo "=== Installing Rebrowser Playwright Browser ==="
        
        # Method 1: Try standard playwright install (shares cache)
        echo "Method 1: Standard playwright install for rebrowser compatibility..."
        playwright install chromium || echo "⚠️ Method 1 failed"
        
        # Method 2: Try python module method
        echo "Method 2: Python module install..."
        python -m rebrowser_playwright install chromium || echo "⚠️ Method 2 failed"
        
        # Method 3: Check if browsers are already available
        echo "Method 3: Verify browser availability..."
        python -c "
from rebrowser_playwright.sync_api import sync_playwright
try:
    p = sync_playwright().start()
    browser = p.chromium.launch()
    print('✅ Rebrowser chromium browser available')
    browser.close()
    p.stop()
except Exception as e:
    print(f'⚠️ Browser verification failed: {e}')
" || echo "⚠️ Method 3 verification failed"
        
        # Verify installations
        echo ""
        echo "=== Verifying Installations ==="
        python -c "import playwright; print('✅ Playwright')"
        python -c "import patchright; print('✅ Patchright')"
        python -c "import camoufox; print('✅ Camoufox with geoip')"
        python -c "import rebrowser_playwright; print('✅ Rebrowser Playwright')"
        python -c "import pygeoip; print('✅ pygeoip')"
    
    - name: ✅ Verify Browser Installations
      run: |
        echo "=== Browser Verification ==="
        
        python -c "from playwright.sync_api import sync_playwright; p = sync_playwright().start(); browser = p.chromium.launch(); print('✅ Chromium functional'); browser.close(); p.stop()" || {
          echo "❌ Chromium verification failed!"
          exit 1
        }
        
        python -c "from playwright.sync_api import sync_playwright; p = sync_playwright().start(); browser = p.firefox.launch(); print('✅ Firefox functional'); browser.close(); p.stop()" || {
          echo "⚠️ Firefox verification failed (continuing)"
        }
        
        # Enhanced Rebrowser verification with fallback
        echo "=== Rebrowser Playwright Verification ==="
        python -c "
from rebrowser_playwright.sync_api import sync_playwright
import sys
try:
    p = sync_playwright().start()
    browser = p.chromium.launch(headless=True)
    print('✅ Rebrowser Chromium fully functional')
    browser.close()
    p.stop()
except Exception as e:
    print(f'⚠️ Rebrowser verification failed: {e}')
    print('This may still work at runtime - continuing tests')
    sys.exit(0)  # Don't fail the workflow
" || {
          echo "⚠️ Rebrowser verification failed - may auto-download on first use"
        }
        
    - name: ✅ Validate Installation Versions
      run: |
        echo "=== Installation Verification ==="
        echo ""
        echo "Python packages:"
        pip list | grep -E "playwright|patchright|camoufox|pygeoip"
        echo ""
        echo "Playwright browsers:"
        playwright install --list || true
        
    - name: ✅ Validate Proxy Configuration
      run: |
        if [ -z "$PROXY_HOST" ] || [ -z "$PROXY_PORT" ]; then
          echo "❌ Proxy configuration missing!"
          echo "Please set PROXY_HOST and PROXY_PORT secrets"
          exit 1
        fi
        
        echo "✅ Proxy configured: $PROXY_HOST:$PROXY_PORT"
        
    - name: 📂 Create Required Directories
      run: |
        mkdir -p test_results/screenshots
        mkdir -p test_results/reports
        chmod -R 755 test_results
        
    - name: 🎭 Run All Playwright Tests
      run: |
        export DISPLAY=:99
        
        python main.py \
          --proxy env: \
          --all \
          --device "${{ inputs.device }}" \
          --mode "${{ inputs.mode }}" \
          --output-prefix "all_playwright" \
          --verbose
          
    - name: 📸 Verify Results
      if: always()
      run: |
        echo "=== Test Results ==="
        echo "Screenshots:"
        ls -lh test_results/screenshots/ 2>/dev/null | tail -n 30 || echo "No screenshots"
        echo ""
        echo "Screenshot count by library:"
        for lib in playwright patchright camoufox rebrowser_playwright; do
          COUNT=$(ls test_results/screenshots/${lib}* 2>/dev/null | wc -l)
          echo "  $lib: $COUNT screenshots"
        done
        echo ""
        echo "Reports:"
        ls -lh test_results/reports/ 2>/dev/null | tail -n 10 || echo "No reports"
        
    - name: 📸 Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-all-playwright-${{ github.run_number }}
        path: test_results/screenshots/
        retention-days: 7
        if-no-files-found: warn
        
    - name: 📊 Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: reports-all-playwright-${{ github.run_number }}
        path: test_results/reports/
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📋 Test Results Summary
      if: always()
      run: |
        echo "## 🎭 All Playwright Libraries Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Device:** ${{ inputs.device }}" >> $GITHUB_STEP_SUMMARY
        echo "**Mode:** ${{ inputs.mode }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f test_results/reports/*_summary.md ]; then
          echo "### Detailed Results" >> $GITHUB_STEP_SUMMARY
          cat test_results/reports/*_summary.md >> $GITHUB_STEP_SUMMARY
        fi
