name: Test All Playwright Libraries

on:
  workflow_dispatch:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

permissions:
  contents: read

jobs:
  test-all-playwright:
    timeout-minutes: 60
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install Playwright libraries with version pinning
      run: |
        # Install all playwright libraries
        pip install playwright patchright camoufox rebrowser-playwright
        
    - name: Install browsers for each library
      run: |
        # Install browsers for standard playwright
        playwright install --with-deps chromium
        
        # For rebrowser-playwright, we need to install browsers using its specific version
        # First, let's check what version rebrowser-playwright uses
        python -c "import rebrowser_playwright; print('rebrowser-playwright version:', rebrowser_playwright.__version__)"
        
        # Install browsers using rebrowser-playwright's specific install method
        python -c "
import sys
import subprocess
import rebrowser_playwright
from rebrowser_playwright._impl._driver import compute_driver_executable, get_driver_env

# Get the rebrowser-playwright driver and install browsers
try:
    # Method 1: Try using rebrowser-playwright's install
    result = subprocess.run([
        sys.executable, '-m', 'rebrowser_playwright', 'install', 'chromium'
    ], capture_output=True, text=True, timeout=300)
    print(f'rebrowser-playwright install output: {result.stdout}')
    if result.stderr:
        print(f'rebrowser-playwright install stderr: {result.stderr}')
    
    if result.returncode != 0:
        print('Method 1 failed, trying method 2...')
        # Method 2: Try installing with the specific driver
        driver_executable = compute_driver_executable()
        env = get_driver_env()
        result2 = subprocess.run([
            driver_executable, 'install', 'chromium'
        ], env=env, capture_output=True, text=True, timeout=300)
        print(f'Driver install output: {result2.stdout}')
        if result2.stderr:
            print(f'Driver install stderr: {result2.stderr}')
            
        if result2.returncode != 0:
            print('Method 2 failed, trying method 3...')
            # Method 3: Manual browser path setup
            import os
            import shutil
            cache_dir = os.path.expanduser('~/.cache/ms-playwright')
            print(f'Available browser directories in {cache_dir}:')
            if os.path.exists(cache_dir):
                for item in os.listdir(cache_dir):
                    print(f'  {item}')
                    
                # Find chromium directories and create symlinks for rebrowser
                chromium_dirs = [d for d in os.listdir(cache_dir) if d.startswith('chromium')]
                headless_dirs = [d for d in os.listdir(cache_dir) if 'headless' in d]
                
                print(f'Chromium dirs: {chromium_dirs}')
                print(f'Headless dirs: {headless_dirs}')
                
                # Try to create appropriate symlinks or copies
                if chromium_dirs and not headless_dirs:
                    # Create headless_shell directory structure
                    import re
                    for chromium_dir in chromium_dirs:
                        version_match = re.search(r'chromium-(\d+)', chromium_dir)
                        if version_match:
                            version = version_match.group(1)
                            target_dir = f'chromium_headless_shell-{version}'
                            source_path = os.path.join(cache_dir, chromium_dir)
                            target_path = os.path.join(cache_dir, target_dir)
                            
                            if not os.path.exists(target_path):
                                print(f'Creating symlink: {source_path} -> {target_path}')
                                try:
                                    os.symlink(source_path, target_path)
                                except OSError:
                                    print(f'Symlink failed, trying copy: {source_path} -> {target_path}')
                                    shutil.copytree(source_path, target_path)
except Exception as e:
    print(f'Error during rebrowser-playwright browser installation: {e}')
    import traceback
    traceback.print_exc()
"

    - name: Verify browser installations
      run: |
        echo "Checking browser cache directory:"
        ls -la ~/.cache/ms-playwright/ || echo "No browser cache found"
        
        echo "Testing each library's browser access:"
        python -c "
import asyncio

async def test_browsers():
    libraries = [
        ('playwright', 'from playwright.async_api import async_playwright'),
        ('patchright', 'from patchright.async_api import async_playwright'),
        ('rebrowser_playwright', 'from rebrowser_playwright.async_api import async_playwright')
    ]
    
    for lib_name, import_stmt in libraries:
        try:
            print(f'\\nTesting {lib_name}:')
            exec(import_stmt, globals())
            
            async with async_playwright() as p:
                browser = await p.chromium.launch(headless=True)
                print(f'  ✅ {lib_name} browser launch: SUCCESS')
                await browser.close()
        except Exception as e:
            print(f'  ❌ {lib_name} browser launch: FAILED - {e}')

asyncio.run(test_browsers())
"

    - name: Set up display
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        
    - name: Run tests
      env:
        # Add proxy environment variables if needed
        HTTP_PROXY: ${{ secrets.HTTP_PROXY }}
        HTTPS_PROXY: ${{ secrets.HTTPS_PROXY }}
        PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
        PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
      run: |
        python main.py --libraries playwright,patchright,camoufox,rebrowser_playwright
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-test-results
        path: |
          test_results/
          !test_results/screenshots
        retention-days: 30
        
    - name: Upload screenshots
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-screenshots
        path: test_results/screenshots/
        retention-days: 7