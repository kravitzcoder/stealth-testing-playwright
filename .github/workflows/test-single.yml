name: 🎭 Single Library Test

on:
  workflow_dispatch:
    inputs:
      library:
        description: 'Library to test'
        required: true
        type: choice
        options:
          - playwright
          - patchright
          - camoufox
          - rebrowser_playwright
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false

jobs:
  test-single-library:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 🖥️ Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            libglib2.0-0 \
            libnss3 \
            libnspr4 \
            libdbus-1-3 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libxkbcommon0 \
            libatspi2.0-0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libgbm1 \
            libpango-1.0-0 \
            libcairo2 \
            libasound2t64
      
      - name: 📦 Install Core Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 📦 Install Library-Specific Dependencies
        run: |
          echo "=========================================="
          echo "Installing: ${{ inputs.library }}"
          echo "=========================================="
          
          case "${{ inputs.library }}" in
            "playwright")
              pip install playwright
              playwright install chromium
              playwright install-deps chromium
              python -c "from playwright.sync_api import sync_playwright; print('✅ Playwright verified')"
              ;;
              
            "patchright")
              pip install patchright
              patchright install chromium || echo "⚠️ Patchright install warning (non-fatal)"
              python -c "from patchright.sync_api import sync_playwright; print('✅ Patchright verified')"
              ;;
              
            "camoufox")
              pip install 'camoufox[geoip]' pygeoip
              python -c "import camoufox; print('✅ Camoufox verified')"
              ;;
          
            "rebrowser_playwright")
              echo "=== Installing rebrowser-playwright ==="
              
              # Install both packages
              pip install playwright rebrowser-playwright
              
              # Install system deps
              playwright install-deps chromium
              
              # Install browser with ALL methods
              echo "Installing browser (trying multiple methods)..."
              playwright install chromium
              python -m playwright install chromium
              python -m rebrowser_playwright install chromium || true
              
              # Check if browser exists
              echo "Checking browser installation..."
              ls -la ~/.cache/ms-playwright/ || true
              
              # Verify imports
              python -c "from playwright.sync_api import sync_playwright; print('✅ Playwright OK')"
              python -c "from rebrowser_playwright.async_api import async_playwright; print('✅ Rebrowser OK')"
              
              echo "✅ Setup complete"
              ;;
          
            *)
              echo "❌ Unknown library: ${{ inputs.library }}"
              exit 1
              ;;
          esac
      
      - name: 🎯 Run Single Library Test
        env:
          DISPLAY: ':99'
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}
          PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
          PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        run: |
          # Start virtual display
          Xvfb :99 -screen 0 1920x1080x24 &
          sleep 2
          
          # Build command
          CMD="python main.py --proxy env: --library ${{ inputs.library }}"
          
          if [ "${{ inputs.verbose }}" = "true" ]; then
            CMD="$CMD --verbose"
          fi
          
          echo "Running: $CMD"
          echo "=========================================="
          
          # Extended timeout for rebrowser
          if [ "${{ inputs.library }}" = "rebrowser_playwright" ]; then
            timeout 900 $CMD
          else
            $CMD
          fi
      
      - name: 📊 Display Results Summary
        if: always()
        run: |
          if [ -d "test_results/reports" ]; then
            echo "=========================================="
            echo "Test Results Summary"
            echo "=========================================="
            
            LATEST_REPORT=$(ls -t test_results/reports/*_summary.md 2>/dev/null | head -1)
            
            if [ -n "$LATEST_REPORT" ]; then
              cat "$LATEST_REPORT"
            else
              echo "No summary report found"
            fi
          fi
      
      - name: 🔍 Debug Info (if failed)
        if: failure()
        run: |
          echo "Debug: Browser cache contents"
          ls -laR ~/.cache/ms-playwright/ 2>&1 | head -50 || true
          echo ""
          echo "Debug: Installed packages"
          pip list | grep -E "(playwright|rebrowser)" || true
      
      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ inputs.library }}-${{ github.run_number }}
          path: test_results/
          retention-days: 30
      
      - name: 📤 Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ inputs.library }}-${{ github.run_number }}
          path: test_results/screenshots/
          retention-days: 30
