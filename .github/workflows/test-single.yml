name: 🎯 Single Library Test

on:
  workflow_dispatch:
    inputs:
      library:
        description: 'Playwright library to test'
        required: true
        type: choice
        options:
          - playwright
          - patchright
          - camoufox
          - rebrowser_playwright
      device:
        description: 'Mobile device to emulate'
        required: false
        default: 'iphone_x'
        type: choice
        options:
          - iphone_x
          - iphone_12
          - samsung_galaxy

env:
  PROXY_HOST: ${{ secrets.PROXY_HOST }}
  PROXY_PORT: ${{ secrets.PROXY_PORT }}
  PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
  PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
  CAMOUFOX_SKIP_AUTO_UPDATE: true
  NO_GITHUB_API: true

jobs:
  test-playwright-library:
    runs-on: ubuntu-latest
    timeout-minutes: 20
    
    steps:
    - name: 📄 Checkout Repository
      uses: actions/checkout@v4
      
    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'
    
    - name: 🔧 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: 📦 Install System Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          chromium-browser \
          firefox \
          xvfb \
          libgtk-3-0 \
          libnotify-dev \
          libnss3 \
          libxss1 \
          libasound2t64 \
          libxtst6 \
          xauth \
          libgbm1 \
          fonts-liberation \
          fonts-ipafont-gothic \
          fonts-wqy-zenhei \
          fonts-thai-tlwg \
          fonts-kacst
        
        echo "Chrome binary check:"
        which chromium-browser || which chromium || which google-chrome || echo "Chrome not in PATH"
        
    - name: 📦 Install Base Dependencies
      run: |
        pip install --upgrade pip setuptools wheel
        pip install playwright aiohttp asyncio-throttle beautifulsoup4 Pillow colorlog python-dotenv
        echo "✅ Base dependencies installed"
        
    - name: 📦 Install Library-Specific Dependencies
      run: |
        echo "Installing dependencies for: ${{ inputs.library }}"
        
        case "${{ inputs.library }}" in
          "playwright")
            pip install playwright
            playwright install chromium
            playwright install-deps chromium
            python -c "import playwright; print('✅ Playwright verified')"
            ;;
            
          "patchright")
            pip install patchright
            patchright install chromium || echo "⚠️ Patchright install returned non-zero, continuing..."
            python -c "import patchright; print('✅ Patchright verified')"
            ;;
            
          "camoufox")
            pip install 'camoufox[geoip]' pygeoip
            python -c "import camoufox; print('✅ Camoufox verified')"
            ;;
        
          "rebrowser_playwright")
            pip install rebrowser-playwright
            # Use npx instead of Python command for rebrowser
            npx rebrowser install || echo "Installing rebrowser browser..."
            # Alternative installation methods
            npm install -g rebrowser-playwright || true
            npx rebrowser-playwright install chromium || true
            python -c "from rebrowser_playwright.async_api import async_playwright; print('✅ Rebrowser verified')"
            ;;
        
          *)
            echo "❌ Unknown library: ${{ inputs.library }}"
            exit 1
            ;;
        esac
        
        echo "✅ Library-specific dependencies installed"
    
    - name: ✅ Verify Browser Installation
      run: |
        echo "=== Browser Verification ==="
        
        case "${{ inputs.library }}" in
          "playwright")
            python -c "from playwright.sync_api import sync_playwright; p = sync_playwright().start(); browser = p.chromium.launch(); print('✅ Chromium browser functional'); browser.close(); p.stop()" || {
              echo "⚠️ Browser verification warning (continuing)"
            }
            ;;
            
          "patchright")
            python -c "from patchright.sync_api import sync_playwright; p = sync_playwright().start(); browser = p.chromium.launch(); print('✅ Patchright browser functional'); browser.close(); p.stop()" || {
              echo "⚠️ Patchright browser warning (continuing)"
            }
            ;;
            
          "camoufox")
            echo "⚠️ Camoufox browser verification skipped (downloads on first run)"
            ;;
            
          "rebrowser_playwright")
            # Verify rebrowser installation
            ls -la ~/.cache/rebrowser* 2>/dev/null || echo "No rebrowser cache found"
            npx rebrowser --version || echo "Rebrowser CLI not available"
            ;;
        esac
        
    - name: 📂 Create Required Directories
      run: |
        mkdir -p test_results/screenshots
        mkdir -p test_results/reports
        chmod -R 755 test_results
        ls -la test_results/
        
    - name: ✅ Validate Proxy Configuration
      run: |
        if [ -z "$PROXY_HOST" ] || [ -z "$PROXY_PORT" ]; then
          echo "⚠️ Proxy configuration missing (tests will run without proxy)"
          echo "To enable proxy, set PROXY_HOST and PROXY_PORT secrets in repository settings"
        else
          echo "✅ Proxy configured: [REDACTED]:$PROXY_PORT"
        fi
        
    - name: 🎯 Run Single Library Test
      run: |
        export DISPLAY=:99
        
        python main.py \
          --proxy env: \
          --library "${{ inputs.library }}" \
          --device "${{ inputs.device }}" \
          --output-prefix "single_${{ inputs.library }}" \
          --verbose
          
    - name: 📸 Verify Results
      if: always()
      run: |
        echo "=== Test Results Verification ==="
        echo ""
        echo "Screenshots:"
        if [ -d "test_results/screenshots" ]; then
          ls -lh test_results/screenshots/ 2>/dev/null | tail -n 20 || echo "No screenshots"
          SCREENSHOT_COUNT=$(ls test_results/screenshots/*.png 2>/dev/null | wc -l)
          echo "Total screenshots: $SCREENSHOT_COUNT"
        else
          echo "⚠️ No screenshots directory"
        fi
        
        echo ""
        echo "Reports:"
        if [ -d "test_results/reports" ]; then
          ls -lh test_results/reports/ 2>/dev/null | tail -n 20 || echo "No reports"
          REPORT_COUNT=$(ls test_results/reports/*.json 2>/dev/null | wc -l)
          echo "Total reports: $REPORT_COUNT"
          
          # Display summary if available
          if [ -f test_results/reports/*_summary.md ]; then
            echo ""
            echo "=== Test Summary ==="
            cat test_results/reports/*_summary.md | head -50
          fi
        else
          echo "⚠️ No reports directory"
        fi
        
    - name: 📸 Upload Screenshots
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screenshots-${{ inputs.library }}-${{ github.run_number }}
        path: test_results/screenshots/
        retention-days: 7
        if-no-files-found: warn
        
    - name: 📊 Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: reports-${{ inputs.library }}-${{ github.run_number }}
        path: test_results/reports/
        retention-days: 30
        if-no-files-found: warn
        
    - name: 📋 Test Results Summary
      if: always()
      run: |
        echo "## 🎯 Playwright Library Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Library:** ${{ inputs.library }}" >> $GITHUB_STEP_SUMMARY
        echo "**Device:** ${{ inputs.device }}" >> $GITHUB_STEP_SUMMARY
        echo "**Run:** #${{ github.run_number }}" >> $GITHUB_STEP_SUMMARY
        echo "**Status:** ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f test_results/reports/*_summary.md ]; then
          echo "### Test Summary" >> $GITHUB_STEP_SUMMARY
          cat test_results/reports/*_summary.md >> $GITHUB_STEP_SUMMARY
        fi
