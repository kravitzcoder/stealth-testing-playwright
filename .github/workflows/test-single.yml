name: 🎭 Single Library Test

on:
  workflow_dispatch:
    inputs:
      library:
        description: 'Library to test'
        required: true
        type: choice
        options:
          - playwright
          - patchright
          - camoufox
          - rebrowser_playwright
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false

jobs:
  test-single-library:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 🖥️ Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            libglib2.0-0 \
            libnss3 \
            libnspr4 \
            libdbus-1-3 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libxkbcommon0 \
            libatspi2.0-0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libgbm1 \
            libpango-1.0-0 \
            libcairo2 \
            libasound2t64
      
      - name: 📦 Install Core Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 📦 Install Library-Specific Dependencies
        run: |
          echo "=========================================="
          echo "Installing: ${{ inputs.library }}"
          echo "=========================================="
          
          case "${{ inputs.library }}" in
            "playwright")
              echo "=== Installing Playwright ==="
              pip install playwright
              playwright install chromium
              playwright install-deps chromium
              python -c "from playwright.sync_api import sync_playwright; print('✅ Playwright verified')"
              ;;
              
            "patchright")
              echo "=== Installing Patchright ==="
              pip install patchright
              patchright install chromium || echo "⚠️ Patchright install warning (non-fatal)"
              python -c "from patchright.sync_api import sync_playwright; print('✅ Patchright verified')"
              ;;
              
            "camoufox")
              echo "=== Installing Camoufox ==="
              pip install 'camoufox[geoip]' pygeoip
              python -c "import camoufox; print('✅ Camoufox verified')"
              echo "Note: Camoufox will download browser on first run"
              ;;
          
            "rebrowser_playwright")
              echo "=========================================="
              echo "=== Installing rebrowser-playwright ==="
              echo "=========================================="
              
              echo "Step 1: Installing Python packages..."
              pip install playwright rebrowser-playwright
              echo "✅ Packages installed"
              
              echo ""
              echo "Step 2: Installing system dependencies for Chromium..."
              playwright install-deps chromium
              echo "✅ Dependencies installed"
              
              echo ""
              echo "Step 3: Installing Chromium browser (multiple methods)..."
              
              # Method 1: Standard playwright install
              echo "Method 1: Standard playwright install chromium..."
              if playwright install chromium 2>&1 | tee /tmp/install1.log; then
                echo "✅ Method 1 succeeded"
              else
                echo "⚠️ Method 1 had warnings (checking if browser exists...)"
              fi
              
              # Method 2: Using python module for rebrowser
              echo ""
              echo "Method 2: Python module rebrowser install..."
              if python -m rebrowser_playwright install chromium 2>&1 | tee /tmp/install2.log; then
                echo "✅ Method 2 succeeded"
              else
                echo "⚠️ Method 2 had warnings"
              fi
              
              # Method 3: Direct playwright package install
              echo ""
              echo "Method 3: Direct playwright package install..."
              python -m playwright install chromium 2>&1 | tee /tmp/install3.log || echo "Method 3 completed"
              
              echo ""
              echo "Step 4: Verifying browser installation..."
              
              # Check if browser directory exists
              echo "Checking browser cache directory..."
              ls -la ~/.cache/ms-playwright/ 2>&1 || echo "Cache directory structure:"
              find ~/.cache/ms-playwright/ -type f -name "*chrome*" -o -name "*chromium*" 2>&1 | head -20 || echo "Searching for browser..."
              
              # List all installed browsers
              echo ""
              echo "Installed browsers:"
              playwright install --help | grep -A 50 "browsers" || true
              ls -la ~/.cache/ms-playwright/ 2>&1 || true
              
              # Verify Python imports
              echo ""
              echo "Step 5: Verifying Python imports..."
              python -c "from playwright.sync_api import sync_playwright; print('✅ Playwright import OK')"
              python -c "from rebrowser_playwright.async_api import async_playwright; print('✅ Rebrowser import OK')"
              
              # Try to get browser path
              echo ""
              echo "Step 6: Checking browser paths..."
              python -c "
import sys
try:
    from playwright.sync_api import sync_playwright
    with sync_playwright() as p:
        browser_type = p.chromium
        print(f'Playwright expects browser at: {browser_type.executable_path}')
except Exception as e:
    print(f'Could not determine playwright path: {e}')

try:
    from rebrowser_playwright.sync_api import sync_playwright as rb_sync_playwright
    with rb_sync_playwright() as p:
        browser_type = p.chromium
        print(f'Rebrowser expects browser at: {browser_type.executable_path}')
except Exception as e:
    print(f'Could not determine rebrowser path: {e}')
" || echo "Path check completed with errors"
              
              echo ""
              echo "Step 7: Final verification - attempting browser launch..."
              timeout 120 python -c "
import asyncio
from rebrowser_playwright.async_api import async_playwright

async def test_launch():
    print('Attempting to launch browser...')
    try:
        async with async_playwright() as p:
            print('Playwright context created')
            browser = await p.chromium.launch(headless=True, timeout=60000)
            print('✅ Browser launched successfully!')
            await browser.close()
            return True
    except Exception as e:
        print(f'❌ Browser launch failed: {e}')
        print('This may mean browser needs to download on first actual test run')
        return False

result = asyncio.run(test_launch())
" || echo "⚠️ Pre-launch test completed (browser may download during actual test)"
              
              echo ""
              echo "=========================================="
              echo "✅ rebrowser-playwright setup complete"
              echo "=========================================="
              ;;
          
            *)
              echo "❌ Unknown library: ${{ inputs.library }}"
              exit 1
              ;;
          esac
      
      - name: 🎯 Run Single Library Test
        env:
          DISPLAY: ':99'
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}
          PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
          PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        run: |
          # Start virtual display
          Xvfb :99 -screen 0 1920x1080x24 &
          sleep 2
          
          # Build command
          CMD="python main.py --proxy env: --library ${{ inputs.library }}"
          
          if [ "${{ inputs.verbose }}" = "true" ]; then
            CMD="$CMD --verbose"
          fi
          
          echo "Running: $CMD"
          echo "=========================================="
          
          # For rebrowser, give extra time for potential first-run browser download
          if [ "${{ inputs.library }}" = "rebrowser_playwright" ]; then
            echo "⚠️ Note: First test may trigger browser download (1-2 min)"
            timeout 900 $CMD || {
              echo "❌ Test failed or timed out"
              echo "Checking browser status..."
              ls -la ~/.cache/ms-playwright/ || true
              exit 1
            }
          else
            $CMD
          fi
      
      - name: 📊 Display Results Summary
        if: always()
        run: |
          if [ -d "test_results/reports" ]; then
            echo "=========================================="
            echo "Test Results Summary"
            echo "=========================================="
            
            LATEST_REPORT=$(ls -t test_results/reports/*_summary.md 2>/dev/null | head -1)
            
            if [ -n "$LATEST_REPORT" ]; then
              cat "$LATEST_REPORT"
            else
              echo "No summary report found"
            fi
          fi
      
      - name: 🔍 Debug Info (if tests failed)
        if: failure()
        run: |
          echo "=========================================="
          echo "Debug Information"
          echo "=========================================="
          echo "Browser cache contents:"
          ls -laR ~/.cache/ms-playwright/ 2>&1 | head -100 || echo "Could not list cache"
          echo ""
          echo "Python packages:"
          pip list | grep -E "(playwright|rebrowser)" || true
          echo ""
          echo "Install logs:"
          cat /tmp/install*.log 2>&1 || echo "No install logs"
      
      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ inputs.library }}-${{ github.run_number }}
          path: test_results/
          retention-days: 30
      
      - name: 📤 Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ inputs.library }}-${{ github.run_number }}
          path: test_results/screenshots/
          retention-days: 30
