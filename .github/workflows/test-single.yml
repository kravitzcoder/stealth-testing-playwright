# COMPLETE FIXED: Single Library Test Workflow with rebrowser installation fix

name: 🎭 Single Library Test

on:
  workflow_dispatch:
    inputs:
      library:
        description: 'Library to test'
        required: true
        type: choice
        options:
          - playwright
          - patchright
          - camoufox
          - rebrowser_playwright
      verbose:
        description: 'Enable verbose logging'
        required: false
        type: boolean
        default: false

jobs:
  test-single-library:
    runs-on: ubuntu-latest
    timeout-minutes: 25  # Increased timeout for rebrowser installation
    
    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4
      
      - name: 🐍 Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
      
      - name: 🟢 Set up Node.js (for rebrowser)
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
        if: inputs.library == 'rebrowser_playwright'
      
      - name: 🖥️ Install System Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            xvfb \
            libglib2.0-0 \
            libnss3 \
            libnspr4 \
            libdbus-1-3 \
            libatk1.0-0 \
            libatk-bridge2.0-0 \
            libcups2 \
            libdrm2 \
            libxkbcommon0 \
            libatspi2.0-0 \
            libxcomposite1 \
            libxdamage1 \
            libxfixes3 \
            libxrandr2 \
            libgbm1 \
            libpango-1.0-0 \
            libcairo2 \
            libasound2
      
      - name: 📦 Install Core Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: 📦 Install Library-Specific Dependencies
        run: |
          echo "=========================================="
          echo "Installing: ${{ inputs.library }}"
          echo "=========================================="
          
          case "${{ inputs.library }}" in
            "playwright")
              echo "=== Installing Playwright ==="
              pip install playwright
              playwright install chromium
              playwright install-deps chromium
              python -c "from playwright.sync_api import sync_playwright; print('✅ Playwright verified')"
              ;;
              
            "patchright")
              echo "=== Installing Patchright ==="
              pip install patchright
              patchright install chromium || echo "⚠️ Patchright install warning (non-fatal)"
              python -c "from patchright.sync_api import sync_playwright; print('✅ Patchright verified')"
              ;;
              
            "camoufox")
              echo "=== Installing Camoufox ==="
              pip install 'camoufox[geoip]' pygeoip
              python -c "import camoufox; print('✅ Camoufox verified')"
              echo "Note: Camoufox will download browser on first run"
              ;;
          
            "rebrowser_playwright")
              echo "=========================================="
              echo "=== Installing rebrowser-playwright ==="
              echo "=========================================="
              
              # Step 1: Install Python package
              echo "Step 1: Installing Python package..."
              pip install rebrowser-playwright || {
                echo "❌ FAILED: Could not install rebrowser-playwright Python package"
                exit 1
              }
              echo "✅ Python package installed"
              
              # Step 2: Verify Python import works
              echo "Step 2: Verifying Python import..."
              python -c "from rebrowser_playwright.async_api import async_playwright; print('✅ Import successful')" || {
                echo "❌ FAILED: Cannot import rebrowser_playwright"
                exit 1
              }
              
              # Step 3: Install Chromium browser using MULTIPLE methods
              echo "Step 3: Installing Chromium browser..."
              
              # Method A: Try standard playwright install (uses standard cache)
              echo "Method A: Using standard playwright install..."
              playwright install chromium && {
                echo "✅ Method A succeeded: Standard playwright install worked"
              } || {
                echo "⚠️ Method A failed, trying Method B..."
                
                # Method B: Try rebrowser-specific install
                echo "Method B: Using rebrowser-playwright install..."
                python -m rebrowser_playwright install chromium && {
                  echo "✅ Method B succeeded: rebrowser-playwright install worked"
                } || {
                  echo "⚠️ Method B failed, trying Method C..."
                  
                  # Method C: Try npx installation
                  echo "Method C: Using npx rebrowser-playwright..."
                  npx --yes rebrowser-playwright@latest install chromium && {
                    echo "✅ Method C succeeded: npx install worked"
                  } || {
                    echo "⚠️ Method C failed, trying Method D..."
                    
                    # Method D: Manual installation via Python API
                    echo "Method D: Manual installation via Python API..."
                    python -c "
from rebrowser_playwright.sync_api import sync_playwright
try:
    p = sync_playwright().start()
    browser_type = p.chromium
    print(f'Installing browser to: {browser_type._impl_obj._local_utils._executable_path}')
    browser_type._impl_obj._local_utils.install()
    p.stop()
    print('✅ Method D succeeded: Manual Python API install worked')
except Exception as e:
    print(f'⚠️ Method D failed: {e}')
    print('Browser will attempt to download on first run')
" || {
                      echo "⚠️ All installation methods attempted"
                      echo "Browser will download on first test run (may take 1-2 min)"
                    }
                  }
                }
              }
              
              # Step 4: Verify installation (don't fail if browser not found)
              echo "Step 4: Final verification..."
              python -c "
from rebrowser_playwright.sync_api import sync_playwright
import os
try:
    p = sync_playwright().start()
    # Just verify the API works, don't try to launch
    print('✅ rebrowser-playwright API verified')
    print(f'Browser cache: {os.environ.get(\"PLAYWRIGHT_BROWSERS_PATH\", \"default\")}')
    p.stop()
except Exception as e:
    print(f'⚠️ Verification warning: {e}')
    print('This is OK - browser may download on first launch')
" || echo "Verification had warnings (non-fatal)"
              
              echo "=========================================="
              echo "✅ rebrowser-playwright setup complete"
              echo "=========================================="
              ;;
          
            *)
              echo "❌ Unknown library: ${{ inputs.library }}"
              exit 1
              ;;
          esac
      
      - name: ✅ Verify Library Installation
        run: |
          echo "=========================================="
          echo "Verifying ${{ inputs.library }} is ready..."
          echo "=========================================="
          
          case "${{ inputs.library }}" in
            "playwright")
              python -c "from playwright.sync_api import sync_playwright; p = sync_playwright().start(); print('✅ Playwright ready'); p.stop()"
              ;;
            "patchright")
              python -c "from patchright.sync_api import sync_playwright; p = sync_playwright().start(); print('✅ Patchright ready'); p.stop()"
              ;;
            "camoufox")
              python -c "import camoufox; print('✅ Camoufox ready')"
              ;;
            "rebrowser_playwright")
              python -c "from rebrowser_playwright.async_api import async_playwright; print('✅ rebrowser_playwright ready')"
              ;;
          esac
          
          echo "✅ Verification complete"
      
      - name: 🎯 Run Single Library Test
        env:
          DISPLAY: ':99'
          PROXY_HOST: ${{ secrets.PROXY_HOST }}
          PROXY_PORT: ${{ secrets.PROXY_PORT }}
          PROXY_USERNAME: ${{ secrets.PROXY_USERNAME }}
          PROXY_PASSWORD: ${{ secrets.PROXY_PASSWORD }}
        run: |
          # Start virtual display
          Xvfb :99 -screen 0 1920x1080x24 &
          sleep 2
          
          # Build command
          CMD="python main.py --proxy env: --library ${{ inputs.library }}"
          
          if [ "${{ inputs.verbose }}" = "true" ]; then
            CMD="$CMD --verbose"
          fi
          
          echo "Running: $CMD"
          echo "=========================================="
          
          # Run the test with extended timeout for rebrowser
          if [ "${{ inputs.library }}" = "rebrowser_playwright" ]; then
            echo "⚠️ First run may take 1-2 minutes to download browser..."
            timeout 600 $CMD || {  # 10 minute timeout for rebrowser first run
              echo "❌ Test timed out or failed"
              exit 1
            }
          else
            $CMD
          fi
      
      - name: 📊 Display Results Summary
        if: always()
        run: |
          if [ -d "test_results/reports" ]; then
            echo "=========================================="
            echo "Test Results Summary"
            echo "=========================================="
            
            # Find the most recent report
            LATEST_REPORT=$(ls -t test_results/reports/*_summary.md 2>/dev/null | head -1)
            
            if [ -n "$LATEST_REPORT" ]; then
              cat "$LATEST_REPORT"
            else
              echo "No summary report found"
            fi
          fi
      
      - name: 📤 Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ inputs.library }}-${{ github.run_number }}
          path: |
            test_results/
          retention-days: 30
      
      - name: 📤 Upload Screenshots
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: screenshots-${{ inputs.library }}-${{ github.run_number }}
          path: |
            test_results/screenshots/
          retention-days: 30
      
      - name: ✅ Test Status Summary
        if: always()
        run: |
          echo "=========================================="
          echo "Test Execution Complete"
          echo "=========================================="
          echo "Library: ${{ inputs.library }}"
          echo "Status: Check results above"
          echo "Artifacts uploaded for 30 days"
          echo "=========================================="
